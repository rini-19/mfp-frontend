{"version":3,"sources":["components/Users.component.jsx","components/MessageTable.component.jsx","components/Messages.component.jsx","components/Services.component.jsx","pages/dashboard.page.jsx","pages/login.page.jsx","App.js","serviceWorker.js","index.js"],"names":["Users","props","loadUser","res","setState","users","console","log","state","id","name","email","phone","isLN","localStorage","getItem","token","fetch","method","headers","then","response","json","responsiveData","this","title","xs","noPadding","customOptions","Text","size","buttonRight","iconClass","width","placeholder","columns","data","Component","Styles","styled","div","Table","useTable","getTableProps","getTableBodyProps","headerGroups","rows","prepareRow","map","headerGroup","getHeaderGroupProps","column","getHeaderProps","render","row","i","getRowProps","cells","cell","getCellProps","MessageTable","user_id","client_id","useState","msgs","setMsgs","useEffect","mounted","body","JSON","stringify","Uid","React","useMemo","Header","accessor","Messages","x","forEach","r","fbid","push","subTitle","browserTitle","undefined","index","key","type","collapsable","collapsed","clientID","len","length","Services","loadServices","Type","Res_date","is_resolved","resolved_at","details","user","req_date","time_received","status","text","res_date","services","responsiveColumns","data2","Item","Sidebar","UserPanel","Entry","Navbar","Dashboard","logout","clear","history","replace","client","updateClient","parse","titleShort","theme","Core","icon","onClick","username","clientData","imageUrl","to","path","withRouter","Login","onNameChange","event","loginName","target","value","onPasswordChange","loginPassword","onSubmitChange","password","loadClient","className","onChange","App","updateIsLoggedIn","setItem","isLoggedIn","exact","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.809b8cbf.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nimport {\n  Content, Row, Box, SimpleTable, Col, Inputs, Button,\n} from 'adminlte-2-react';\n\nclass Users extends Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      users: [{\n        id: null,\n        name: '',\n        email:'',\n        phone: null\n      }]\n    }\n  }\n\n  componentDidMount() {\n    const isLN = localStorage.getItem('LoggedIn')\n    console.log('is logged in', isLN);\n    let token = null;\n    if(isLN){\n      token = localStorage.getItem('token');\n      console.log(token);\n    }\n    fetch('http://localhost:3000/users',{\n        method: 'post',\n        headers: {'Content-type': 'application/json',\n                  'Authorization': 'Bearer ' + token}\n      //   body: JSON.stringify({\n      //     token: token\n      // })\n    })\n    .then(response => {\n      return response.json();\n    })\n    .then(res =>{\n      console.log(res);\n      this.loadUser(res);\n    });\n  }\n\n  loadUser = (res) =>{\n    this.setState({ users: res })\n    console.log('user array loaded',this.state.users)\n  }\n\n  render() {\n    \n    const responsiveColumns = [{ title: 'User ID', data: 'id' },\n      { title: 'fbid', data: 'fbid' },\n      { title: 'User Name', data: 'name' },\n      { title: 'Email', data: 'email' },\n      { title: 'Phone', data: 'phone' }];\n    const responsiveData = this.state.users;\n    console.log(responsiveData);\n\n    return (\n      <Content title=\"User Info\">\n        <Row>\n          <Col xs={12}>\n            <Box noPadding customOptions={<Inputs.Text size=\"sm\" buttonRight={<Button iconClass=\"fa-search\" />} width=\"130px\" placeholder=\"Search\" />}>\n              <SimpleTable\n                columns={responsiveColumns}\n                data={responsiveData}\n              />\n            </Box>\n          </Col>\n        </Row>\n      </Content>\n    );\n  }\n}\n\nexport default Users;","import React from 'react';\nimport styled from 'styled-components';\nimport { useTable } from 'react-table';\n\n// import makeData from './makeData';\nimport { useState } from 'react';\nimport { useEffect } from 'react';\n\nconst Styles = styled.div`\n  padding: 1rem;\n\n  table {\n    border-spacing: 0;\n    border: 1px solid black;\n\n    tr {\n      :last-child {\n        td {\n          border-bottom: 0;\n        }\n      }\n    }\n\n    th,\n    td {\n      margin: 0;\n      padding: 0.5rem;\n      border-bottom: 1px solid black;\n      border-right: 1px solid black;\n\n      :last-child {\n        border-right: 0;\n      }\n    }\n  }\n`\n\nfunction Table({ columns, data }) {\n    // Use the state and functions returned from useTable to build your UI\n    const {\n      getTableProps,\n      getTableBodyProps,\n      headerGroups,\n      rows,\n      prepareRow,\n    } = useTable({\n      columns,\n      data,\n    })\n  \n    // Render the UI for your table\n    return (\n      <table {...getTableProps()}>\n        <thead>\n          {headerGroups.map(headerGroup => (\n            <tr {...headerGroup.getHeaderGroupProps()}>\n              {headerGroup.headers.map(column => (\n                <th {...column.getHeaderProps()}>{column.render('Header')}</th>\n              ))}\n            </tr>\n          ))}\n        </thead>\n        <tbody {...getTableBodyProps()}>\n          {rows.map((row, i) => {\n            prepareRow(row)\n            return (\n              <tr {...row.getRowProps()}>\n                {row.cells.map(cell => {\n                  return <td {...cell.getCellProps()}>{cell.render('Cell')}</td>\n                })}\n              </tr>\n            )\n          })}\n        </tbody>\n      </table>\n    )\n  }\n\nconst MessageTable = ({user_id=null, client_id=null}) =>{ \n\n  console.log(\"client id\", client_id);\n  const [msgs, setMsgs] = useState([]);\n\n  // const cnt = 0;\n\n  useEffect(() =>{\n    let mounted=true;\n    const isLN = localStorage.getItem('LoggedIn')\n    let token = null;\n    if(isLN){\n      token = localStorage.getItem('token');\n      console.log(token);\n    }\n      fetch('/messages',{\n          method: 'post',\n          headers: {'Content-type': 'application/json',\n                    'Authorization': 'Bearer ' + token},\n          body: JSON.stringify({\n            Uid: user_id\n        })\n      })\n      .then(response => {\n        return response.json();\n      })\n      .then(res =>{\n        if(mounted){\n          setMsgs(res);\n          console.log(res);\n        }\n      })\n    return () => mounted = false;\n  },[user_id]);\n\n  const columns = React.useMemo(\n        () => [\n          {\n            Header: 'Messages',\n            columns: [\n              {\n                Header: 'Message',\n                accessor: 'message',\n              },\n              {\n                Header: 'Timestamp',\n                accessor: 'sent_at',\n              },\n            ],\n          },\n        ],\n        []\n      )\n      //const data = [];\n        \n      const data = React.useMemo(() => msgs ,[msgs]);\n      \n      return (\n        <Styles>\n          {\n            <Table columns={columns} data={data} />\n          }\n          \n        </Styles>\n      )\n}\n\nexport default MessageTable;\n  ","import React, { Component } from 'react';\nimport { Content, Row, Col, Box } from 'adminlte-2-react';\n\nimport MessageTable from './MessageTable.component';\n\nclass Messages extends Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      users: [{\n        id: null,\n        name: ''\n      }]\n      // messages: [{\n      //   user_id: null,\n      //   content: [{\n      //     message: '',\n      //     sent_at: ''\n      //   }]\n      // }]\n    }\n  }\n\n  componentDidMount() {\n    const isLN = localStorage.getItem('LoggedIn')\n    let token = null;\n    if(isLN){\n      token = localStorage.getItem('token');\n      console.log(token);\n    }\n    fetch('/users',{\n        method: 'post',\n        headers: {'Content-type': 'application/json',\n                  'Authorization':'Bearer ' + token }\n    })\n    .then(response => {\n      return response.json();\n    })\n    .then(res =>{\n      console.log(res);\n      this.loadUser(res);\n    });\n  }\n\n  loadUser = (res) =>{\n    let x = {};\n    let data = [];\n    res.forEach(r => {\n      x = {\n        id: r.fbid,\n        name: r.name \n      }\n      data.push(x);\n    });\n    this.setState({ users: data })\n    console.log(\"user in loaduser\",this.state.users);\n    console.log(this.state.users[1].name);\n  }\n\n  render() {\n    if(this.state.users[1]) {\n      let {name} = this.state.users[1];\n      console.log(\"user in render\",name);\n    }\n    return (<Content title=\"Messages\" subTitle=\"Getting started with adminlte-2-react\" browserTitle=\"\">\n      <Row>\n        <Col xs={12}>\n          {\n            this.state.users===undefined  ? \n            console.log(this.state.users):\n                this.state.users.map ( ({id, name}, index) =>{\n                  return(\n                    <Box key={id} title={name} type=\"primary\" collapsable={true} collapsed={true} > \n                      {console.log(\"user\",id)}\n                      <MessageTable user_id = {id} client_id = {this.props.clientID} len={this.state.users.length} />\n                    </Box>\n                  ) \n                }) \n          }\n        </Col>\n      </Row>\n    </Content>\n    );\n  }\n}\n\nexport default Messages;","import React, { Component } from 'react';\n\nimport {\n  Content, Row, Box, SimpleTable, Col, Label, Inputs, Button,\n} from 'adminlte-2-react';\n\nclass Services extends Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      services: [{\n        id: null,\n        details: '',\n        user: '',\n        req_date: '',\n        status: {\n          type: '',\n          text: ''\n        },\n        res_date: ''\n      }]\n    }\n  }\n\n  componentDidMount() {\n    const isLN = localStorage.getItem('LoggedIn')\n    console.log('is logged in', isLN);\n    let token = null;\n    if(isLN){\n      token = localStorage.getItem('token');\n      console.log(token);\n    }\n    fetch('/services',{\n      method: 'post',\n      headers: {'Content-type': 'application/json',\n                'Authorization': 'Bearer ' + token}\n    })\n      .then(response => {\n        return response.json();\n      }) \n      .then(res =>{\n        console.log(res);\n        this.loadServices(res);\n      });\n  }\n\n  loadServices = (res) =>{\n    let Type, Text, Res_date;\n    let x = {};\n    console.log(\"type of i\",typeof(i))\n    let data = [];\n    res.forEach((r) =>{\n      console.log(r);\n      if(r.is_resolved===1){\n        Type = 'success';\n        Text = 'resolved';\n        Res_date = r.resolved_at;\n      } else {\n        Type = 'warning';\n        Text = 'not resolved';\n        Res_date = null;\n      }\n      x = {\n        id: r.id,\n        details: r.details,\n        user: r.name,\n        req_date: r.time_received,\n        status: {\n          type: Type,\n          text: Text\n        },\n        res_date: Res_date\n      }\n      data.push(x);\n    })\n    this.setState({services: data});\n  }\n\n  render() {\n    \n    const responsiveColumns = [{ title: 'Service ID', data: 'id' },\n      { title: 'Service Details', data: 'details' },\n      { title: 'User', data: 'user' },\n      { title: 'Request Date', data: 'req_date' },\n      { title: 'Status', data: 'status', render: data2 => <Label type={data2.type}>{data2.text}</Label> },\n      { title: 'Resolved At', data: 'res_date' }];\n    const responsiveData = this.state.services;\n\n    return (\n      <Content title=\"Service Request Info\">\n        <Row>\n          <Col xs={12}>\n            <Box noPadding customOptions={<Inputs.Text size=\"sm\" buttonRight={<Button iconClass=\"fa-search\" />} width=\"130px\" placeholder=\"Search\" />}>\n              <SimpleTable\n                columns={responsiveColumns}\n                data={responsiveData}\n              />\n            </Box>\n          </Col>\n        </Row>\n      </Content>\n    );\n  }\n}\n\nexport default Services;","import React, {Component} from 'react';\nimport AdminLTE, {Sidebar, Navbar} from 'adminlte-2-react';\nimport Users from '../components/Users.component';\nimport Messages from '../components/Messages.component';\nimport Services from '../components/Services.component';\n\nimport {withRouter} from 'react-router-dom';\n\nconst { Item, Header, UserPanel } = Sidebar;\nconst {Entry} = Navbar;\n\nclass Dashboard extends Component {\n\n  constructor(props){\n      super(props);\n      this.state = {};\n  }\n\n  componentDidMount() {\n    const isLN = localStorage.getItem('LoggedIn')\n    console.log('is logged in', isLN);\n    let client = null;\n    if(isLN){\n      client = localStorage.getItem('client');\n      console.log('client dash', client);\n      this.props.updateClient(JSON.parse(client));\n    }\n  }\n\n  logout = () =>{\n    localStorage.clear();\n    this.props.history.replace('/');\n  }\n\n  render() {\n    // console.log(\"in dashboard\", this.props.clientData.id);\n    return (\n      <AdminLTE title={[\"App\", \"Name\"]} titleShort={[\"ap\", \"na\"]} theme=\"blue\" >\n        <Navbar.Core>\n          <Entry\n            icon=\"fas-sign-out-alt\" onClick = {this.logout}\n          >\n          </Entry>\n        </Navbar.Core>\n        <Sidebar.Core>\n            <UserPanel username = {this.props.clientData.name} status = \"status\" imageUrl = \"http://getdrawings.com/free-icon/my-profile-icon-67.png\"/>\n            <Header text=\"Options\" icon=\"options-outline\" />\n            <Item key=\"users\" text=\"Users\" to=\"/client-users\" />\n            <Item key=\"messages\" text=\"Messages\" to=\"/client-messages\"  />\n            <Item key=\"services\" text=\"Services\" to=\"/client-services\" />\n        </Sidebar.Core>\n        <Users path=\"/client-users\" clientID = {this.props.clientData.id}/>\n        <Messages path=\"/client-messages\" clientID = {this.props.clientData.id}/>\n        <Services path=\"/client-services\" clientID = {this.props.clientData.id}/>\n      </AdminLTE>\n    );\n  }\n}\nexport default withRouter(Dashboard);\n","import React, {Component} from 'react';\nimport {withRouter, Link} from 'react-router-dom';\n\nimport './login.page.css';\n\nclass Login extends Component {\n    constructor(props){\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tloginName: '',\n\t\t\tloginPassword: ''\n\t\t}\n\t}\n\n\tonNameChange = (event) =>{\n\t\tthis.setState({loginName: event.target.value});\n\t}\n\n\tonPasswordChange = (event) =>{\n\t\tthis.setState({loginPassword: event.target.value});\n\t}\n\n\tonSubmitChange = () =>{\n\t\tfetch('http://mutualfundcalculator.in/nodejsApp/login',{\n\t\t\tmethod: 'post',\n\t\t\theaders: {'Content-Type': 'application/json'},\n\t\t\tbody: JSON.stringify({\n\t\t\t\tname: this.state.loginName,\n\t\t\t\tpassword: this.state.loginPassword\n\t\t\t})\n\t\t})\n\t\t\t.then(response => response.json())\n\t\t\t.then(data => {\n\t\t\t\tif(data.id){\n\t\t\t\t\tthis.props.loadClient(data);\n\t\t\t\t\tthis.props.history.replace('/mfp-frontend/dashboard');\n\t\t\t\t}\n\t\t\t\telse \n\t\t\t\t\tconsole.log(\"login component\", data);\n\t\t\t})\n\t}\n\n\trender(){\n\n\t\treturn(\n\t\t\t<div id = \"loginform\">\n\t\t\t\t<h2 id=\"headerTitle\">Login</h2>\n\t\t\t\t<div>\n\t\t\t\t\t<div className=\"row\">\n\t\t\t\t\t\t<label>Username</label>\n\t\t\t\t\t\t<input onChange={this.onNameChange} type=\"text\" placeholder=\"Enter username\"/>\n\t\t\t\t\t</div> \n\t\t\t\t\t<div className=\"row\">\n\t\t\t\t\t\t<label>Password</label>\n\t\t\t\t\t\t<input onChange={this.onPasswordChange} type=\"password\" placeholder=\"Enter password\"/>\n\t\t\t\t\t</div> \n\t\t\t\t\t<div id=\"button\" className=\"row\">\n\t\t\t\t\t\t<button onClick={this.onSubmitChange}>Login Now</button>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div id=\"alternativeLogin\">\n\t\t\t\t\t\t<label>Or sign in with:</label>\n\t\t\t\t\t\t<div id=\"iconGroup\">\n\t\t\t\t\t\t\t<Link to=\"/\" id=\"facebookIcon\"></Link>\n\t\t\t\t\t\t\t<Link to=\"/\" id=\"twitterIcon\"></Link>\n\t\t\t\t\t\t\t<Link to=\"/\" id=\"googleIcon\"></Link>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\n\t);\n\t}\n}\n\nexport default withRouter(Login);","import React, {Component} from 'react';\nimport {Switch, Route} from 'react-router-dom';\n\nimport Dashboard from './pages/dashboard.page';\nimport Login from './pages/login.page';\n\nclass App extends Component {\n\n  constructor(){\n    super();\n\n    this.state = {\n      isLoggedIn: false,\n      client: {\n        id: null,\n        name: ''\n      }\n    };\n  }\n\n  loadClient = (res) =>{\n    console.log(\" in app\",res);\n    let client = {\n      id: res.client.id,\n      name: res.client.name\n    }\n    this.updateClient(client);\n    this.updateIsLoggedIn(true);\n    localStorage.setItem('LoggedIn',this.state.isLoggedIn);\n    localStorage.setItem('token',res.token);\n    localStorage.setItem('client', JSON.stringify(this.state.client));\n  }\n\n  updateClient = (value) =>{\n    this.setState({client: value});\n  }\n\n  updateIsLoggedIn = (value) =>{\n    this.setState({isLoggedIn: value});\n  }\n\n  render() {\n    console.log(\"in app\", this.state.client);\n    return (\n      \n         <Switch>\n          <Route exact path = '/mfp-frontend' render={(props) =>\n            <Login {...props}\n              loadClient = {this.loadClient}\n            />\n          } />\n          <Route exact path = '/mfp-frontend/dashboard' render = {(props) =>\n            <Dashboard {...props}\n              updateClient = {this.updateClient}\n              clientData = {this.state.client}\n              isLoggedIn = {this.state.client}\n              />    \n          } />\n        </Switch>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {BrowserRouter as Router} from 'react-router-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n// ReactDOM.render(<App />, document.getElementById('root'));\n\nReactDOM.render(\n    <Router>\n    <App />\n  </Router>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}